server {
  listen 80;

  # Get the actual IP of the client through load balancer in the logs
  real_ip_header     X-Forwarded-For;
  set_real_ip_from   0.0.0.0/0;

  # disable content-type sniffing on some browsers.
  add_header X-Content-Type-Options nosniff;

  # This header enables the Cross-site scripting (XSS) filter
  add_header X-XSS-Protection "1; mode=block";

  # Enables response header of "Vary: Accept-Encoding"
  gzip on;
  gzip_disable "msie6";
  gzip_static on;
  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_buffers 16 8k;
  gzip_http_version 1.1;
  gzip_types application/javascript application/rss+xml application/vnd.ms-fontobject application/x-font application/x-font-opentype application/x-font-otf application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/opentype font/otf font/ttf image/svg+xml image/x-icon text/css text/javascript text/plain text/xml;

  root /usr/share/nginx/html;

  # Block access to dot files
  location ~ /\.(?!well-known).* {
      deny  all;
      access_log off;
      log_not_found off;
  }

  # serve regular pages. If /.htpasswd exists, then go to the @auth block
  location / {
    error_page 599 = @auth;
    recursive_error_pages on;

    if (-f /.htpasswd) {
        return 599;
    }

    index index.html;
    try_files $uri $uri/ @prerender;
  }

  # limit access with auth if /.htpasswd exists
  location @auth {
    satisfy any;
    allow 127.0.0.1;
    deny  all;
    auth_basic "Testers Only";
    auth_basic_user_file /.htpasswd;

    index index.html index.htm;
    try_files $uri $uri/ /index.html =404;
    add_header Cache-Control "no-store, no-cache, must-revalidate";
  }

  location /static {
    expires 1y;
    add_header Cache-Control "public";
    access_log off;
  }

  location @prerender {
      proxy_set_header X-Prerender-Token ABr8Yc4YHX8bhFkSIN3e;

      set $prerender 0;
      if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp") {
          set $prerender 1;
      }
      if ($args ~ "_escaped_fragment_") {
          set $prerender 1;
      }
      if ($http_user_agent ~ "Prerender") {
          set $prerender 0;
      }
      if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
          set $prerender 0;
      }

      #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
      resolver 8.8.8.8;

      if ($prerender = 1) {
          #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
          set $prerender "service.prerender.io";
          rewrite .* /$scheme://$host$request_uri? break;
          proxy_pass http://$prerender;
      }
      if ($prerender = 0) {
          add_header Cache-Control "no-store, no-cache, must-revalidate";
          rewrite .* /index.html break;
      }
  }

  include /etc/nginx/extra-conf.d/*.conf;
}
